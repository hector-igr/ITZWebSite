@page "/forgedesktop/{ProjectId:int}"


@using ITZWebClientApp.Components
@using ForgeLibs;
@using ForgeLibs.Models.Forge;
@using ForgeLibs.Data;
@using ITZWebClientApp.Infraestructure.Data;
@using ITZWebClientApp.Infraestructure;
@using ITZWebClientApp.Components.UI;
@using ITZWebClientApp.Components.Charts;
@using ITZWebClientApp.Components.Forge;
@using ForgeLibs.Models.Forge.Queries;
@using ForgeLibs.Models.Charts; 
@using Newtonsoft.Json; 
@using System.Text.Json;
@using System.Drawing; 
@using Console = ITZWebClientApp.Interop.Debug.ConsoleITZ; 

@inject HttpClient client
@inject IJSRuntime JSRuntime
@inject OmniClassRepository omni
@inject IItzRepository repo;


<style>
    .forge_div {
        /*border:dotted;*/
        display: flex;
        height: 100%;
        flex-direction: column;
        padding: 5px;
    }

    .forge_ribbon {
        /*        border-color: red;*/
        /*        border: groove;*/
        flex-basis: 3rem;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index:11;
    }

    .forge_content {
        /*        background-color:orangered;*/
        display: flex;
        overflow: auto;
        flex-basis: 100%;
        flex-direction: row;
        border-color: olive;
    }

    .forge_main {
        /*        border: dotted;
        border-color: blue;*/
        /*        flex-basis: calc(100% - 350px);*/
        display: flex;
        flex-direction: column;
        overflow: auto;
    }

    .forge_viewer {
        flex-basis: 100%;
    }

    .forge_botton {
        overflow: auto;
        /*        border: dotted;
        border-color: red;*/
        /*        height: 40%;*/
    }

    .forge_sidebar {
        /*        background-color: greenyellow;*/
        /*        flex-basis: 350px;*/
        display: flex;
        flex-direction: column;
        padding: 5px;
    }

    .forge_chart {
        /*        flex-basis: 25%;*/
    }

    .forge_table {
        /*        flex-basis: 75%;*/
        /*        border: dotted;*/
        display: flex;
        overflow: auto;
    }
</style>

<style>
    .forge_query_form {
        flex-basis: 100%;
    }

    .forge_layout_switcher {
        display: flex;
        justify-content: right;
        /*        border:dotted;*/
        flex-basis: 10%;
    }
</style>

<style>
    .gutter {
        background-color: #eee;
        background-repeat: no-repeat;
        background-position: 50%;
    }

        .gutter.gutter-horizontal {
            cursor: col-resize;
        }

        .gutter.gutter-vertical {
            cursor: row-resize;
        }

</style>

<style>
    .forgeFirstQueryLabel {
        background-color: var(--webFavoriteColor);
        color: white;
    }
</style>

<style>
    #instruct {
        opacity: 1;
        animation: loopDisplay 2s infinite linear;
    }
    @@-webkit-keyframes loopDisplay {
        0% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }

</style>

<LoadingScreen IsLoaded="_contentLoaded" @ref="loadingScreen" CssClass="@_loadingScreenClass" BackgroundImage="/Dele.png" BackgroundPosition="cover">
    <h4 id="instruct" style="color: var(--webFavoriteColor)">@_instruction</h4>
</LoadingScreen>

<div class="forge_div">
    <CascadingValue Value="this">
        <div class="forge_ribbon form-inline">
            <div class="forge_query_form input-group">
                <ForgeProjectController @ref="_forgeModelSelector"
                                        Project="@_project"
                                        AccessToken="@_modelAccessToken"
                                        OnModelChanged="@( async x=>
                                                           {
                                                               Console.OpenGroup("On Model Changed");
                                                               _instruction = "wait ... ";
                                                               firstModelLoad = true;
                                                               _selectedModel = x;
                                                               if(_loadModelData)
                                                               {
                                                                    await LoadModelData(_selectedModel);
                                                                    _loadModelData = false;
                                                               }
                                                               _instruction = "select view";
                                                               Console.CloseGroup();
                                                           })"
                                        OnViewSelected="@( async forgeView => {
                                                               Console.OpenGroup("On View Selected");
                                                               ForgeModel model = _forgeModelSelector.SelectedModel;
                                                               bool viewDataLoaded = await LoadViewData(model, forgeView);
                                                               if(viewDataLoaded)
                                                               {
                                                                   Console.WriteLine("ADD query by category");
                                                                   _queryTypes.Add(QueryType.ByCategory);
                                                               }
                                                               else
                                                               {
                                                                   
                                                                   Console.WriteLine("REMOVE Query by Category");
                                                                   _queryTypes.Remove(QueryType.ByCategory);
                                                                   await _barChart.UpdateChart(BarChartData.EmptyBarChart());
                                                                   _forgequeyController.Query = QueryType.None;
                                                                   _forgequeyController.Reset();
                                                               }


                                                               if(firstModelLoad)
                                                               {
                                                                   Console.WriteLine("First View Loaded");
                                                                   firstModelLoad = false;
                                                                   _modelUrn64 = ForgeUtils.Base64Encode(model.ObjectId);
                                                                   _viewGuid = forgeView.Guid;
                                                               }
                                                               else
                                                               {
                                                                   Console.WriteLine("View Changed");
                                                                   _forgeViewer.ChangeModel(forgeView.Guid);
                                                               }
                                                               Console.CloseGroup();
                                                           })"></ForgeProjectController>
                @if (firstModelLoad == false && _queryTypes.Count > 0)
                {
                    <ForgeQueryController @ref="_forgequeyController"
                                          ForgeElements="ForgeElemsView"
                                          SelectedIds="@_selectedIDs"
                                          QueryTypes="@_queryTypes.OrderBy(x=> x).ToArray()"
                                          OnChartDataChanged="@(async chartData => {
                                                                    await _barChart.UpdateChart(chartData);
                                                                    try
                                                                    {
                                                                        dynamic json = (dynamic)chartData.JSON;
                                                                        _forgeViewer.ResetOverrideColors();
                                                                        IEnumerable<dynamic> datasets = json.data.datasets;
                                                                        dynamic dataset = datasets.FirstOrDefault();
                                                                        if(dataset != null)
                                                                        {
                                                                            IEnumerable<dynamic> data = dataset.data;
                                                                            int counter = data.Count();
                                                                            List<int> totalIds = new List<int>();
                                                                            //Console.WriteLine($"dataset ids : {dataset.ids}");
                                                                            for (int i = 0; i < counter; i++)
                                                                            {
                                                                                string background = dataset.backgroundColor[i];
                                                                                IEnumerable<dynamic> ids = dataset.ids[i];
                                                                                int[] ids1 = ids.Select(x => (int)x).ToArray();
                                                                                totalIds.AddRange(ids1);
                                                                                _forgeViewer.ChangeColorElements(ids1, background);
                                                                                //Console.WriteLine($"element : {string.Join(",", ids1 )} ,  background : {background} ");
                                                                            }
                                                                            if(totalIds.Count > 0)
                                                                            {
                                                                                SavedIds = totalIds.ToArray();
                                                                                _forgeViewer.IsolateElements(string.Join(",", totalIds));
                                                                            }
                                                                            //Console.WriteLine($"FINISH ISOLATION AND CHANGE COLOR");

                                                                        }
                                                                    }
                                                                    catch (Exception ex)
                                                                    {
                                                                        Console.WriteLine(ex);
                                                                    }

                                                                } )"
                                          OnCategoryChanged="@(async category => {
                                                                   Category = category;
                                                                   if(string.IsNullOrEmpty(Category))
                                                                   {
                                                                       _forgeViewer.ResetOverrideColors();
                                                                       _forgeViewer.ShowAll();
                                                                       _forgeViewer.FitToView();
                                                                   }
                                                                   else
                                                                   {
                                                                       var ids = ForgeElemsView.Where(y => y.Category == category).Select(y => y.ObjectId).ToArray();
                                                                       _forgeViewer.IsolateElements(ids);
                                                                   }

                                                               })"
                                          OnSelectIds="@(x => _forgeViewer.IsolateElements(x))"
                                          OnScheduleChanged="@(async forgeShedule => {
                                                                   Console.OpenGroup("On Schedule Changed");
                                                                   if (!string.IsNullOrEmpty(forgeShedule.JSON))
                                                                   {
                                                                       Console.WriteLine("loading jsgantt data from forge schedule json");
                                                                       _jsgantt.LoadData(forgeShedule.Now, forgeShedule.JSON);
                                                                       ChangeSplitterSizes("bottonbar", new int[] { 70, 30 });
                                                                   }
                                                                   else
                                                                   {
                                                                       Console.WriteLine("no json data from forge schedule");
                                                                       _jsgantt.UnloadData();
                                                                       ChangeSplitterSizes("bottonbar", new int[] { 100, 00 });
                                                                   }
                                                                   _scheduleSelected = forgeShedule;
                                                                   IEnumerable<int> revitIds = _scheduleSelected.GetAllRevitIds();
                                                                   Console.WriteLine($"all revit ids {revitIds.Count()}");
                                                                   ObjectsNotMap = GetNoneLinkObjectsIds(revitIds).ToArray();
                                                                   Console.WriteLine($"objects not map {ObjectsNotMap.Count()}");
                                                                   Console.CloseGroup();
                                                                   StateHasChanged();
                                                               } )"
                                          ForgeSchedules="@_forgeSchedules"
                                          OnDateChanged="@(async date =>
                                                           {
                                                               Console.OpenGroup("OnDateChanged");
                                                               Console.WriteLine($"object no map : {ObjectsNotMap.Length}");
                                                               await _jsgantt.ChangeDate(date);
                                                               //StateHasChanged();
                                                               //Console.WriteLine("Hide NOT MAP OBJETS");

                                                               Stopwatch stopwatch = Stopwatch.StartNew();
                                                               _forgeViewer.Hide(ObjectsNotMap.ToArray());

                                                               //Console.WriteLine($"HIDE NOT MAP {stopwatch.Elapsed.TotalSeconds} sec");
                                                               _forgeViewer.ResetOverrideColors();
                                                               //Console.WriteLine($"RESET OVERRIDE {stopwatch.Elapsed.TotalSeconds} sec");


                                                               var present = _scheduleSelected.GetPresentTasks(date);
                                                               var presentIds = _scheduleSelected.GetTaskObjectsIds(present);
                                                               var revitIds = _scheduleSelected.GetRevitIds(presentIds.ToArray());
                                                               var objPresetnIds = GetObjectIds(revitIds).ToList();
                                                               string color = ChartUtils.ColorRgbaName(Color.Green);
                                                               _forgeViewer.ChangeColorElements(objPresetnIds.ToArray(), color);
                                                               Console.WriteLine($"present ids : '{presentIds.Count()}' in {stopwatch.Elapsed.TotalSeconds} sec");
                                                               //_forgeViewer.IsolateElements(objPresetnIds.ToArray());
                                                               //return;

                                                               var past = _scheduleSelected.GetPastTasks(date);
                                                               var pastIds = _scheduleSelected.GetTaskObjectsIds(past);
                                                               revitIds = _scheduleSelected.GetRevitIds(pastIds.ToArray());
                                                               var objPastIds = GetObjectIds(revitIds);
                                                               //color = ChartUtils.ColorRgbaName(Color.Red);
                                                               //_forgeViewer.ChangeColorElements(presentIds.ToArray(), color);
                                                               Console.WriteLine($"past ids : '{objPastIds.Count()}'{stopwatch.Elapsed.TotalSeconds} sec");

                                                               var future = _scheduleSelected.GetFutureTasks(date);
                                                               var futureIds = _scheduleSelected.GetTaskObjectsIds(future);
                                                               revitIds = _scheduleSelected.GetRevitIds(futureIds.ToArray());
                                                               var objeFutureIds = GetObjectIds(revitIds);
                                                               Console.WriteLine($"future ids :'{objeFutureIds.Count()}' in {stopwatch.Elapsed.TotalSeconds} sec");

                                                               objPresetnIds.AddRange(objPastIds);
                                                               Console.WriteLine($"APPEND IDS {stopwatch.Elapsed.TotalSeconds} sec");
                                                               _forgeViewer.Show(objPresetnIds.ToArray());
                                                               Console.WriteLine($"SHOW {stopwatch.Elapsed.TotalSeconds} sec");
                                                               _forgeViewer.Hide(objeFutureIds.ToArray());
                                                               Console.WriteLine($"HIDE {stopwatch.Elapsed.TotalSeconds} sec");
                                                               Console.CloseGroup();
                                                           })"
                                          OnQueryTypeChanged="@(async query=> {
                                                                    Console.OpenGroup($"OnQueryTypeChanged ... {query}");
                                                                    switch(query)
                                                                    {
                                                                        case QueryType.None:
                                                                            {
                                                                                ChangeSplitterSizes("main", new int[] { 100, 0 });
                                                                                ChangeSplitterSizes("bottonbar", new int[] { 100, 0 });

                                                                                HideGutter("main");
                                                                                HideGutter("bottonbar");
                                                                                break;
                                                                            }
                                                                        case QueryType.ByCategory:
                                                                            {
                                                                                ChangeSplitterSizes("main", new int[] { 70, 30 });
                                                                                ChangeSplitterSizes("bottonbar", new int[] { 100, 0 });

                                                                                ShowGutter("main");
                                                                                HideGutter("bottonbar");
                                                                                break;
                                                                            }
                                                                        case QueryType.ByAdvance:
                                                                            {
                                                                                ChangeSplitterSizes("main", new int[] { 100, 0 });
                                                                                ChangeSplitterSizes("bottonbar", new int[] { 100, 0 });
                                                                                HideGutter("main");
                                                                                ShowGutter("bottonbar");
                                                                                break;
                                                                            }
                                                                    };
                                                                    Console.CloseGroup();
                                                                } )" />
                }

            </div>
            @*<div class="forge_layout_switcher">
                <button class="oi oi-arrow-bottom" @onclick="@(x => { SetSplitterToMin("main", false); UpdateResize(x); })"></button>
                <button class="oi oi-arrow-right" @onclick="@(x => { SetSplitterToMin("bottonbar", false); UpdateResize(x); })"></button>
            </div>*@
        </div>

        <div class="forge_content">
            <div class="forge_main">
                <div class="forge_viewer">
                    <ForgeViewer @ref="_forgeViewer"
                                 ViewerId="view1"
                                 AccessToken="@_modelAccessToken"
                                 ProjectUrn64="@_modelUrn64"
                                 ViewGuid="@_viewGuid"
                                 OnDocumentLoadSuccess="x=> _contentLoaded = true"
                                 OnChangeSelection="@(ids=> {
                                                          _selectedIDs = string.Join(",", ids);
                                                          _selectedElement = ForgeElemsView.FirstOrDefault(y => y.ObjectId == ids[0]);
                                                          //Console.WriteLine(_selectedElement.RevitId);
                                                          if(_selectedElement != null)
                                                          {
                                                              _selectedElement.GetChildren(ForgeElemsView);
                                                              _selectedElement.GetParent(ForgeElemsView);
                                                          }
                                                      })" />
                </div>
                <div class="forge_botton">
                    @*<GanttChart></GanttChart>*@
                    <JsGantt @ref="_jsgantt" Id="GanttChartDIV" 
                             OnRowSelected="@(taskId=> {
                                                  //Console.WriteLine("ON TASK SELECTED");
                                                  //Console.WriteLine(_scheduleSelected.ForgeTaskMapping.Count);
                                                  if (_scheduleSelected.ForgeTaskMapping.TryGetValue(taskId, out int[] forgeElIds) && forgeElIds.Length > 0)
                                                  {
                                                      int[] ids = GetObjectIds(forgeElIds).ToArray();
                                                      _forgeViewer.IsolateElements(ids);
                                                  }
                                              })"></JsGantt>
                </div>
            </div>

            <div class="forge_sidebar">
                <div class="forge_chart">
                    <BarChart @ref="_barChart"
                              ChartName="Grafica"
                              Id="chart"
                              KeepAspectRatio="false"
                              OnBarClicked="@(x=> {
                                                  _forgeViewer.IsolateElements(x.ids);
                                              })" 
                              OnClickOnEmptySpace="@(x=> { 
                                                        if(SavedIds.Length > 0)
                                                        {
                                                            _forgeViewer.IsolateElements(string.Join(",", SavedIds));
                                                        }                                 
                                                     })"/>
                </div>
                <div class="forge_table">
                    <TabSet>
                        <Tab Title="Quantification">
                            <ForgeCategoryTable @ref="_tblCat"
                                                ForgeElements="@ForgeElemsView"
                                                Category="@Category"
                                                OnItemSelected="@(x=> _forgeViewer?.IsolateElements(new int[] { x }))" />
                        </Tab>
                        <Tab Title="Assembly">
                            <ForgeItemTable Element="@_selectedElement"
                                            OnParentSelection="@(x=> GetForgeElement(x))"
                                            OnItemSelection="@(x=> _forgeViewer.IsolateElements(x.ToString()))" />
                        </Tab>
                    </TabSet>
                </div>
            </div>
        </div>
    </CascadingValue>
</div>

@code {


    private int[] SavedIds = Array.Empty<int>();
    private ForgeSchedule[] _forgeSchedules { get; set; }

    private string _loadingScreenClass = "appear";
    public string LoadingScreenClass
    {
        get { return _loadingScreenClass; }
        set
        {
            _loadingScreenClass = value;
            StateHasChanged();
        }
    }
    LoadingScreen loadingScreen;
    private bool _contentLoaded = false;
    private string _instruction = "";
    //private string _projectName { get; set; }
    private ForgeLibs.Models.Project _project { get; set; }
    private HashSet<QueryType> _queryTypes = new HashSet<QueryType>();
    private ForgeModel _selectedModel { get; set; }
    private bool _loadModelData { get; set; } = true;
    private string _selectedIDs { get; set; }
    private string _modelUrn64 { get; set; }
    private string _viewGuid { get; set; }
    private string _modelAccessToken { get; set; }
    private bool _shoulRender = true;
    private ForgeViewer _forgeViewer;
    private ForgeQueryController _forgequeyController = new ForgeQueryController();
    private ForgeProjectController _forgeModelSelector;
    private JsGantt _jsgantt;
    private ForgeCategoryTable _tblCat;
    private BarChart _barChart;
    private ForgeElement _selectedElement;
    private ForgeSchedule _scheduleSelected;
    private Dictionary<string, int> _viewMaps;
    private Dictionary<string, List<(string, int)>> _viewMapDic = new Dictionary<string, List<(string, int)>>();
    private Dictionary<string, ForgeElement[]> _viewElements = new Dictionary<string, ForgeElement[]>();
    public string Category { get; set; }



    [CascadingParameter]
    MainLayout layout { get; set; }
    [Parameter]
    public int ProjectId { get; set; }
    //public IEnumerable<ForgeElement> ForgeElemsFull = Enumerable.Empty<ForgeElement>();
    public ForgeElement[] ForgeElemsFull = new ForgeElement[0];
    //public IEnumerable<ForgeElement> ForgeElemsView = Enumerable.Empty<ForgeElement>();
    public ForgeElement[] ForgeElemsView = new ForgeElement[0];

    private bool firstModelLoad = true;
    int counter = 0;
    protected override async Task OnInitializedAsync()
    {
        Console.js = JSRuntime;
        Console.OpenGroup("Forge Desktop");
        Console.WriteLine("ini Forge desktop");
        layout.Toggle();

        if (counter == 0)
        {
            _project = repo.Projects.FirstOrDefault(x => x.Id == ProjectId);
            Console.WriteLine("project name " + _project.Name);
            bool auth = await LoadForgeModelAuthInfo();
            ForgeModel repoModel = repo.GetForgeModelAsync(ProjectId);
            _forgeSchedules = repoModel.Schedules;
            if (_forgeSchedules.Length > 0)
            {
                _queryTypes.Add(QueryType.ByAdvance);
            }
            // wait for loading screen
            await Task.Delay(1000);
            Console.WriteLine("Loading Splitters");
            await LoadSplitter("main", "forge_main", "forge_sidebar", false, 5, new int[] { 100, 00 });
            await LoadSplitter("sidebar", "forge_chart", "forge_table", true, 5, new int[] { 30, 70 });
            await LoadSplitter("bottonbar", "forge_viewer", "forge_botton", true, 5, new int[] { 100, 0 });
            Console.WriteLine("Hide Gutters");
            HideGutter("main");
            HideGutter("bottonbar");
            counter++;
        }
        _instruction = "select model";
        Console.CloseGroup();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            //HideGutter("main");
            //HideGutter("bottonbar");
        }
    }

    public async Task<bool> LoadForgeModelAuthInfo()
    {
        //ForgeAuth auth = await http.GetJsonAsync<ForgeAuth>(@"https://localhost:44383/api/auth");
        //string uri = "https://www.dropbox.com/s/f63bysbygw3rrlw/access.json?dl=1";
        //HttpRequestMessage requestMessage = new HttpRequestMessage(HttpMethod.Post, uri);

        //var json = await http.GetStringAsync(uri);
        //dynamic credentials = JsonConvert.DeserializeObject(json);
        //Console.WriteLine(credentials);
        // Now parse with JSON.Net

        //HttpResponseMessage response = await http.GetAsync(uri);
        //dynamic credentials = JsonConvert.DeserializeObject(response.Content.ReadAsStringAsync().Result);
        //Console.WriteLine(credentials);

        //ForgeAuth auth = await ForgeUtils.GetForgeAuth("a4Pg8Uq0WXDMO5ANelaKXywSAJAOvUsK", "Y510f0377670e4df", "data:read");
        ForgeAuth auth = await ForgeUtils.GetForgeAuth("fjGGjnwIJTeZQ8S9cn2ULJ67Blx3i1pY", "CFFfztdAcz48QHAr", "data:read");
        if (auth != null)
        {
            Console.WriteLine("get auth from itz server ... OK");
            _modelAccessToken = auth.Access_Token;
            return true;
        }
        else
        {
            Console.WriteLine("get auth from itz server ... Cant reach the server");
        }
        return false;
    }

    public async Task<bool> LoadModelData(ForgeModel model)
    {
        Console.OpenGroup(nameof(LoadModelData));
        string bucket = model.BucketKey;
        string fileName = System.IO.Path.GetFileNameWithoutExtension(model.ObjectKey);
        bool result = false;

        string dbAddress = $"models_metadata/{bucket}/{fileName}_db.json";
        Console.WriteLine($"loading model data from => {dbAddress}");
        HttpResponseMessage response = await client.GetAsync(dbAddress);
        if(response.IsSuccessStatusCode)
        {
            Console.WriteLine($"response ... ok");
            string dbJson = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"read json ... ok");
            Stopwatch stopwatch = Stopwatch.StartNew();
            //if (!string.IsNullOrEmpty(dbJson) && !string.IsNullOrEmpty(mapJson))
            {
                //ForgeElems = ParseForgeElements(dbJson, map);

                //{
                //    stopwatch.Reset();
                //    stopwatch.Start();
                //    string dbJson = await client.GetStringAsync(dbAddress);
                //    ForgeElems = System.Text.Json.JsonSerializer.Deserialize<ForgeElement[]>(dbJson);
                //    stopwatch.Stop();
                //    Console.WriteLine($"USING TEXT JSON SERIALIZER {stopwatch.Elapsed.TotalSeconds} sec ... {ForgeElems.Count()} count");
                //}



                //{
                //    stopwatch.Reset();
                //    stopwatch.Start();
                //    ForgeElems = await client.GetJsonAsync<ForgeElement[]>(dbAddress);
                //    stopwatch.Stop();
                //    Console.WriteLine($"USING TEXT JSON client.GetJsonAsync {stopwatch.Elapsed.TotalSeconds} sec ... {ForgeElems.Count()} count");
                //}


                {
                    if (!string.IsNullOrEmpty(dbJson))
                    {
                        ForgeElemsFull = Utf8Json.JsonSerializer.Deserialize<ForgeElement[]>(dbJson);
                    }
                    else
                    {
                        Console.WriteLine($"json data is empty");
                        ForgeElemsFull = new ForgeElement[0];
                        Console.CloseGroup();
                        return false;
                    }
                    Console.WriteLine($"Using Utf8Json.JsonSerializer {stopwatch.Elapsed.TotalSeconds} sec ... {ForgeElemsFull.Length} count");

                    //TRY TO LOAD THE CHILDREN IS A TIME CONSUMING!!
                    //foreach (var item in ForgeElemsFull)
                    //{
                    //    item.GetChildren(ForgeElemsFull);
                    //    item.GetParent(ForgeElemsFull);
                    //}
                    //Console.WriteLine($"Loading Hierarchy Tree {stopwatch.Elapsed.TotalSeconds} sec");
                }

                //    stopwatch.Reset();
                //    stopwatch.Start();
                //    string dbJson = await client.GetStringAsync(dbAddress);
                //    ForgeElems = Newtonsoft.Json.JsonConvert.DeserializeObject<ForgeElement[]>(dbJson);
                //    stopwatch.Stop();
                //    Console.WriteLine($"USING Newtonsoft.JsonConvert {stopwatch.Elapsed.TotalSeconds} sec ... {ForgeElems.Count()} count");
                //}

                result = true;
            }
        }
        else
        {
            Console.WriteLine($"Model doesnt have data");
        }
        Console.CloseGroup();
        return result;
    }

    public async Task<bool> LoadViewData(ForgeModel model, ForgeView view)
    {
        Console.OpenGroup($"{nameof(LoadViewData)} ... {view.Name}");
        if(_viewElements.ContainsKey(view.Name))
        {
            Console.WriteLine("taking saved elements from last import");
            ForgeElemsView = _viewElements[view.Name];
            if(_viewMapDic.ContainsKey(view.Name))
            {
                _viewMaps = _viewMapDic[view.Name].ToDictionary(x=> x.Item1, y=> y.Item2);
            }
            else
            {
                Console.WriteLine(".... no view maps for this view");
                _viewMaps.Clear();
            }
            return true;
        }
        else
        {
            Console.WriteLine("loading data ...");
            string bucket = model.BucketKey;
            string fileName = System.IO.Path.GetFileNameWithoutExtension(model.ObjectKey);
            string viewName = view.Name.Replace(" ", "").ToLower();
            string mapAddress = $"models_metadata/{bucket}/{fileName}_{viewName}_map.json";
            HttpResponseMessage response = await client.GetAsync(mapAddress);
            if (response.IsSuccessStatusCode)
            {
                string mapJson = await response.Content.ReadAsStringAsync();
                _viewMaps = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, int>>(mapJson);
                Stopwatch stopwatch = Stopwatch.StartNew();
                List<ForgeElement> fe = new List<ForgeElement>();
                foreach (ForgeElement item in ForgeElemsFull)
                {
                    if (_viewMaps.ContainsKey(item.RevitId.ToString()))
                    {
                        int? objectId = _viewMaps[item.RevitId.ToString()];
                        if (objectId != null)
                        {
                            item.ObjectId = objectId.Value;
                            fe.Add(item);
                        }
                    }
                }
                ForgeElemsView = fe.ToArray();
                _viewElements[view.Name] = ForgeElemsView;
                Console.WriteLine($"Mapped Objects {stopwatch.Elapsed.TotalSeconds} sec ... {ForgeElemsFull.Count()} count");
                Console.CloseGroup();
                return true;
            }
            else
            {
                Console.WriteLine($"no file in : {mapAddress}");
                _viewMaps.Clear();
                ForgeElemsView = new ForgeElement[0];
            }
        }
        Console.CloseGroup();
        return false;
    }

    public static ForgeElement[] ParseForgeElements(string json, Dictionary<string, int> revitForgeMapping)
    {
        //ForgeElement[] fEls = JsonConvert.DeserializeObject<ForgeElement[]>(json);
        ForgeElement[] fEls = Newtonsoft.Json.JsonConvert.DeserializeObject<ForgeElement[]>(json);

        //string jsi = JsonConvert.SerializeObject(fEls);
        //Console.WriteLine(jsi);

        //Console.WriteLine("mapping ids");
        foreach (ForgeElement item in fEls)
        {
            if(revitForgeMapping.ContainsKey(item.RevitId.ToString()))
            {
                int? objectId = revitForgeMapping[item.RevitId.ToString()];
                if (objectId != null)
                {
                    item.ObjectId = objectId.Value;
                }

            }

        }
        //Console.WriteLine("mapping ids ... finish");
        return fEls;
    }

    /// <summary>
    /// Loads the parent and children of the object id and isolate in forge viewer
    /// </summary>
    /// <param name="objectId"></param>
    public void GetForgeElement(int objectId)
    {
        //Console.WriteLine($"ForgeDomain.GetForgeElement({objectId})");
        ForgeElement forgeElement = this.ForgeElemsView.FirstOrDefault(x => x.ObjectId == objectId);
        //Console.WriteLine($"{forgeElement?.RevitId}");
        if (forgeElement != null)
        {
            _selectedElement = forgeElement;
            _forgeViewer.IsolateElements(forgeElement.ObjectId.ToString());
            Stopwatch stopwatch = Stopwatch.StartNew();
            _selectedElement.GetChildren(ForgeElemsView);
            Console.WriteLine(stopwatch.Elapsed.TotalSeconds);
            _selectedElement.GetParent(ForgeElemsView);
            Console.WriteLine(stopwatch.Elapsed.TotalSeconds);
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async void UpdateResize(dynamic sizes)
    {
        _forgeViewer.Resize();
    }

    public async ValueTask LoadSplitter(string splitterName, string firstDiv, string secondDiv, bool isVertical, int gutterWidth, int[] iniSizes)
    {
        firstDiv = $".{firstDiv}";
        secondDiv = $".{secondDiv}";
        string dir = isVertical ? "vertical" : "horizontal";
        await JSRuntime.InvokeVoidAsync("LoadSplitter", splitterName, firstDiv, secondDiv, dir, gutterWidth, iniSizes, DotNetObjectReference.Create(this));
    }


    public async void SetSplitterToMin(string splitterName, bool firstEl)
    {
        int index = firstEl ? 0 : 1;
        await JSRuntime.InvokeVoidAsync("SetSplitterToMin", splitterName, index);
    }

    public async void ChangeSplitterSizes(string splitterName, int[] sizes)
    {
        await JSRuntime.InvokeVoidAsync("ChangeSplitterSize", splitterName, sizes);
        _forgeViewer.Resize();
    }

    public async void ShowGutter(string splitterName)
    {
        await JSRuntime.InvokeVoidAsync("ShowGutter", splitterName);
    }

    public async void HideGutter(string splitterName)
    {
        await JSRuntime.InvokeVoidAsync("HideGutter", splitterName);
    }


    int[] ObjectsNotMap = new int[0];

    public IEnumerable<int> GetObjectIds(IEnumerable<int> revitIds)
    {
        foreach (int revitId in revitIds)
        {
            if (_viewMaps.TryGetValue(revitId.ToString(), out int r))
            {
                yield return r;
            }
        }
    }

    public IEnumerable<int> GetNoneLinkObjectsIds(IEnumerable<int> revitIds)
    {
        //Console.WriteLine($"GetNoneLinkObjectsIds()");
        var viewRevitIds = _viewMaps.Select(x => Convert.ToInt32(x.Key));
        //Console.WriteLine($"allObjectIds : {viewRevitIds.Count()}");
        var missing = viewRevitIds.Except(revitIds);
        //Console.WriteLine($"Missing : {missing.Count()}");
        foreach (int m in missing)
        {
            yield return _viewMaps[m.ToString()];
        }
    }
}