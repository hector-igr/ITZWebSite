@page "/forge/{ProjectId:int}"


@using ITZWebClientApp.Components
@using ForgeLibs;
@using ForgeLibs.Models.Forge;
@using ForgeLibs.Data;
@using ITZWebClientApp.Infraestructure.Data;
@using System.IO;
@using System.Diagnostics;
@using ITZWebClientApp.Infraestructure;
@using ITZWebClientApp.Components.UI;
@using ITZWebClientApp.Components.Charts;


@inject HttpClient http
@inject IJSRuntime JSRuntime
@inject OmniClassRepository omni
@inject IForgeModelRepository repo;


    <div class="forgeDomain">
        <CascadingValue Value="this">
            <div class="forgeQuery">
                <QueryByCategoriesForm query="@query"
                                       OnCategoryChanged="@OnCategoryChanged"
                                       ProjectName="@projectName"
                                       OnPropertyChanged="@OnPropertyChanged"
                                       OnGroupPropertyChanged="@OnPropertyGroupChanged"
                                       SelectedIds="@selectionModel.IdsStr"
                                       OnSelectIds="@(x=> forgeViewer.IsolateElements(x))"></QueryByCategoriesForm>
            </div>

            <div class="forgeDesktop">
                <ForgeViewer ViewerId="view1"
                                 AccessToken="@ModelAccessToken"
                                 ProjectUrn64="@ModelUrn64"
                                 @ref="forgeViewer"
                                 OnChangeSelection="@(x=> {
                                         selectionModel.IdsStr = string.Join(",", x);
                                         LastItemSelected = ForgeElems.FirstOrDefault(y => y.ObjectId == x[0]);
                                         Console.WriteLine("OnChangeSelection :" + LastItemSelected);
                                         if(LastItemSelected != null)
                                         {
                                             LastItemSelected.GetChildren(ForgeElems);
                                             LastItemSelected.GetParent(ForgeElems);
                                         }
                                     })" />
                <div>
                    <div class="forgeBlock" style="height:30%">
                        <TabSet>
                            <Tab Title="Totales">
                                <BarChart Id="bar_1" ChartName="Grafica" Category="@category" Property="@property" PropertyGroup="@group"></BarChart>
                            </Tab>
                            <Tab Title="Porcentajes">
                                <PieChart Id="pie_1" ChartName="Dona" Category="@category" Property="@property" PropertyGroup="@group"></PieChart>
                            </Tab>
                        </TabSet>
                    </div>
                    <div id="forgeTable" class="forgeBlock" style="height:70%;">
                        <TabSet>
                            <Tab Title="Resumen">
                                @if (ForgeElems.Count() > 0)
                                {
                                    <ForgeElementTable Category="@category" ForgeElements="@ForgeElems"
                                                       OnItemSelected="@(x=> forgeViewer.IsolateElements(new int[] { x }))"></ForgeElementTable>
                                }
                            </Tab>
                            <Tab Title="Elemento">
                                @if (LastItemSelected != null)
                                {
                                    <ForgeItemTable Model="@LastItemSelected"
                                                    OnParentSelection="@(x=> GetForgeElement(x))"
                                                    OnItemSelection="@(x=> forgeViewer.IsolateElements(x.ToString()))" />
                                }
                            </Tab>
                        </TabSet>
                    </div>
                </div>
            </div>
        </CascadingValue>
    </div>


@*<div id="propertyPanel" style="position:absolute; z-index:100">
        <div id="panelHeader">
            <p>OK</p
            @if(lastItemSelected != null)
            {
                <ForgeItemTable Model="@lastItemSelected"></ForgeItemTable>
            }
        </div>
    </div>*@

@*<div class="row"  style="background-color:yellow; height:100%; padding:10px">
        <div class="col" style="background-color:goldenrod; height:100%; padding:10px">
            <BarChart ChartName="Grafica" Category="@category" Property="@property" PropertyGroup="@group"></BarChart>
        </div>
    </div>*@
@functions {


    class SelectionModel
    {
        private string _idsStr;
        public string IdsStr
        {
            get
            {
                return _idsStr;
            }
            set
            {
                //Ids = value.Split(',').ToList().Select(x=> Convert.ToInt32(x))
                //    .ToArray();
                _idsStr = value;
            }
        }

        public int[] Ids { get; set; }
    }

    public QueryByCategories query { get; set; } = new QueryByCategories();

    public IEnumerable<ForgeElement> ForgeElems = new ForgeElement[0];

    [CascadingParameter]
    MainLayout layout { get; set; }
    [Parameter]
    public int ProjectId { get; set; }
    [Parameter]
    public ForgeModel model { get; set; }

    private string category { get; set; }
    private string property { get; set; }
    private string group { get; set; }
    private string projectName { get; set; }

    private string selectedIDs = "";
    private static SelectionModel selectionModel = new SelectionModel();

    private string ModelUrn64 { get; set; }
    private string ModelAccessToken { get; set; }

    private List<string> Categories { get; set; }
    private string[] Properties { get; set; }

    private void OnCategoryChanged(string str)
    {
        category = str;
    }

    private void OnPropertyChanged(string str)
    {
        property = str;
    }

    private void OnPropertyGroupChanged(string str)
    {
        group = str;
    }

    public string MyProperty { get; set; } = "OK";
    [JSInvokable]
    public void OnGraphBarSelection(string label, string rgb, int[] ids)
    {
        Console.WriteLine("ForgeDomain.OnGraphBarSelection()");
        string str = string.Join(",", ids);
        MyProperty = $"{label} - {str}";
        forgeViewer.IsolateElements(ids);
        forgeViewer.ChangeColorElements(ids, rgb);
    }

    private ForgeViewer forgeViewer;

    public ForgeElement LastItemSelected { get; set; }

    int iniCount = 0;
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("ForgeDomain.OnInitAsync()" + iniCount);

        if (iniCount == 0)
        {
            projectName = repo.Projects.FirstOrDefault(x => x.Id == ProjectId).Name;
            model = await repo.GetForgeModelAsync(ProjectId);
            //await omni.LoadFileAsync();
            await Interop.Utils_DOM.MakeDragableElement(JSRuntime, "propertyPanel");
            await LoadForgeModelAuthInfo(model.ObjectId);
        }
        Console.WriteLine("ForgeDomain.OnInitAsync() ENDs" + iniCount);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("ForgeDomain.OnAfterRenderAsync()" + iniCount);
        if (iniCount == 0)
        {
            await LoadModelData(model);
            iniCount++;
        }
        Console.WriteLine("ForgeDomain.OnAfterRenderAsync() ENDs" + iniCount);
    }

    public async Task LoadForgeModelAuthInfo(string objectId)
    {
        Console.WriteLine($"ForgeDomain.LoadForgeModelAuthInfo() : {objectId}");
        ModelUrn64 = ForgeUtils.Base64Encode(objectId);
        ForgeAuth auth = await http.GetJsonAsync<ForgeAuth>("https://localhost:44383/api/auth");
        ModelAccessToken = auth.Access_Token;
        //Console.WriteLine("modelUrn64 : " + ModelUrn64);
        //Console.WriteLine("modelAccessToken : " + ModelAccessToken);
    }

    public async Task LoadModelData(ForgeModel model)
    {
        Console.WriteLine("ForgeDomain.LoadModelData() ....");
        model = await repo.GetForgeModelAsync(ProjectId);
        //Console.WriteLine(model.ObjectKey);
        var fileName = model.ObjectKey + "Translate.txt";
        //Console.WriteLine(fileName);
        string json = await http.GetStringAsync("models_metadata/" + fileName);
        Console.WriteLine("     : Construct ForgeElements");

        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();
        ForgeElems = ForgeElement.ParseForgeElements(json);
        //ForgeElems = ForgeElement.ParseForgeElementsAsync(json);

        stopWatch.Stop();
        Console.WriteLine($"     : Construct ForgeElements : Count {ForgeElems.Count()} - On {stopWatch.Elapsed.TotalSeconds:0,000.00} sec");
        Categories = ForgeElems.Select(x => x.Category)
            .Where(x => !string.IsNullOrEmpty(x)).Distinct().OrderBy(x => x).ToList();
        query.Categories = Categories;
        Console.WriteLine("..... OK");
        //StateHasChanged();
    }

    public void GetForgeElement(int objectId)
    {
        Console.WriteLine($"ForgeDomain.GetForgeElement({objectId})");
        ForgeElement forgeElement = this.ForgeElems.FirstOrDefault(x => x.ObjectId == objectId);
        Console.WriteLine($"{forgeElement?.RevitId}");
        if (forgeElement != null)
        {
            LastItemSelected = forgeElement;
            forgeViewer.IsolateElements(forgeElement.ObjectId.ToString());
            LastItemSelected.GetChildren(ForgeElems);
            LastItemSelected.GetParent(ForgeElems);
            StateHasChanged();
        }
    }
}