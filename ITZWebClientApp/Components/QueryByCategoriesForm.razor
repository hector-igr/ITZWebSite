@using ForgeLibs.Data;

@inject IJSRuntime JSRuntime
@inject HttpClient http;
@inject OmniClassRepository omni;
@using ITZWebClientApp.Infraestructure;


<EditForm Model="@query" >
    <div class="form-row ">

        <div class="col-sm-2">
            @*<label for="qry_Categories">Categories   :</label>*@
            <InputSelect Id="qry_Categories" @bind-Value="@SelectedCategory" Class="form-control">
                <option>Category ... </option>
                @foreach (var item in query.Categories)
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>

        <div class="col-sm-2">
            @*<label for="qry_Properties">Properties   :</label>*@
            <InputSelect Id="qry_Properties" @bind-Value="@SelectedProperty" Class="form-control">
                <option>Property ... </option>
                @foreach (var item in query.Properties)
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
        <div class="col-sm-2">
            @*<label for="qry_Properties">Group By  :</label>*@
            <InputSelect Id="qry_Properties" @bind-Value="@SelecteGrouping" Class="form-control">
                <option>Group by ... </option>
                @foreach (var item in query.GroupParameters)
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
        <div class="col-sm-auto">
            <div class="form-group row">
                <div class="col-sm-auto">
                    <InputText Id="selectedId" @bind-value="@SelectedIds" Class="form-control" />
                </div>
                <div class="col-sm-2">
                    <button class="btn btn-primary" type="submit" @onclick="@(x=> OnSelectIds.InvokeAsync(SelectedIds) )">Isolate</button>
                </div>
            </div>
        </div>
    </div>
    
</EditForm>

@functions {

    private string _selectedCategory;
    [Parameter]
    public string SelectedCategory
    {
        get { return _selectedCategory; }
        set {
            GetPropertiesByCategories(value);
            OnCategoryChanged.InvokeAsync(value);
            if(_selectedCategory != value)
            {
                _selectedCategory = value;
                SelectedProperty = "";
                SelecteGrouping = "";
            }

        }
    }

    [Parameter]
    public string ProjectName { get; set; }

    private string _selectedProperty;
    [Parameter]
    public string SelectedProperty
    {
        get { return _selectedProperty; }
        set { OnPropertyChanged.InvokeAsync(value); _selectedProperty = value; }
    }

    private string _selecteGrouping;
    [Parameter]
    public string SelecteGrouping
    {
        get { return _selecteGrouping; }
        set { OnGroupPropertyChanged.InvokeAsync(value); _selecteGrouping = value; }
    }

    [Parameter]
    public string SelectedIds { get; set; }

    [Parameter]
    public QueryByCategories query { get; set; } = new QueryByCategories();

    [Parameter]
    public EventCallback<string> OnCategoryChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnPropertyChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnGroupPropertyChanged { get; set; }

    [CascadingParameter]
    public ITZWebClientApp.Pages.ForgeDomain forgeDomain { get; set; }

    [Parameter]
    public EventCallback<string> OnSelectIds { get; set; }


    public override Task SetParametersAsync(ParameterView parameters)
    {
        Console.WriteLine($"QueryByCategories.SetParametersAsync()");
        string category = parameters.GetValueOrDefault<string>("selectedCatetory");
        return base.SetParametersAsync(parameters);
    }

    public void GetPropertiesByCategories(string category)
    {
        Console.WriteLine($"QueryByCategories.GetPropertiesByCategories()");
        string omniNumber = omni.GetOmniClassNumber(category);
        string[] parameters = omni.GetParameters(omniNumber);
        string[] groupParameters = omni.GetGroupingParameters(omniNumber);

        query.Properties = parameters.ToList();
        query.GroupParameters = groupParameters.ToList();

        StateHasChanged();
    }
}