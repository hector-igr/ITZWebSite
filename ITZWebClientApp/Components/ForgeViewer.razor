@using ForgeLibs
@using ForgeLibs.Models.Forge
@using Pages
@using ITZWebClientApp.Infraestructure.Data;

@inject IJSRuntime JSRuntime
@inject HttpClient http;
@inject IForgeModelRepository repo;

<div class="forgeViewer">
    <div id="@ViewerId"></div>
</div>

@functions {

    [CascadingParameter]
    private ForgeDomain domain { get; set; }

    [Parameter]
    public string ViewerId { get; set; }

    [Parameter]
    public string AccessToken { get; set; }

    [Parameter]
    public string ProjectUrn64 { get; set; }


    int onParamSetCount = 0;
    protected override async Task OnParametersSetAsync()
    {
        if(!string.IsNullOrEmpty(AccessToken) && !string.IsNullOrEmpty(ProjectUrn64))
        {
            if(onParamSetCount == 0)
            {
                Console.WriteLine("ForgeViewer.OnParametersSetAsync()");
                //Console.WriteLine("token : " + AccessToken);
                //Console.WriteLine("urn64 : " + ProjectUrn64);
                Interop.ForgeInterop forge = new Interop.ForgeInterop(JSRuntime);
                //await forge.LoadDocument(ViewerId, AccessToken, ProjectUrn64, "onForgeItemClick");
                await forge.LoadDocument(ViewerId, AccessToken, ProjectUrn64, this);
                onParamSetCount++;
            }
        }
    }

    protected override bool ShouldRender()
    {
        return onParamSetCount == 0;
    }

    //public async Task LoadForgeModel(string objectId)
    //{
    //    Console.WriteLine($"ForgeViewer.LoadForgeModel()");
    //    ForgeAuth auth = await http.GetJsonAsync<ForgeAuth>("https://localhost:44383/api/auth");
    //    string projectUrn64 = ForgeUtils.Base64Encode(objectId);
    //    Interop.ForgeInterop forge = new Interop.ForgeInterop(JSRuntime);
    //    var tsk = forge.LoadDocument(ViewerId, auth.Access_Token, projectUrn64, "onForgeItemClick");
    //}

     public void IsolateElements(string ids)
    {
        IsolateElements(ids.Split(',').Select(x=> Convert.ToInt32(x)).ToArray());
    }

    [JSInvokable]
    public void IsolateElements(int[] ids)
    {
        Console.WriteLine($"ForgeViewer.IsolateElements()");
        Interop.ForgeInterop forge = new Interop.ForgeInterop(JSRuntime);
        forge.IsolateElement(ViewerId, ids);
    }

    [JSInvokable]
    public void OnViewerChangedSelection(int[] ids)
    {
        Console.WriteLine("ForgeViewer.OnViewerChangedSelection()");
        OnChangeSelection.InvokeAsync(ids);
    }

    [Parameter]
    public EventCallback<int[]> OnChangeSelection { get; set; }


    public void ChangeColorElements(int[] ids, string rgbString)
    {
        Console.WriteLine($"ForgeViewer.ChangeColorElements()");
        Interop.ForgeInterop forge = new Interop.ForgeInterop(JSRuntime);
        forge.ChangeColorElement(ViewerId, ids, rgbString);
    }
}