@using ForgeLibs.Data
@using ForgeLibs.ViewModels
@using ForgeLibs.Models.Charts;
@using ForgeLibs.Models.Forge

@using ITZWebClientApp.Interfaces;
@using Newtonsoft.Json;

@inject IJSRuntime JSRuntime
@inject HttpClient http;
@inject OmniClassRepository omni;

<div class="" style="position: relative; height:100%; width:100% ">
    <canvas id="@Id"></canvas>
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string ChartName { get; set; }

    [Parameter]
    public string BarType { get; set; } = "bar";

    [Parameter]
    public bool KeepAspectRatio { get; set; } = true;

    [Parameter]
    public EventCallback<(string label, string rgb, int[] ids)> OnBarClicked { get; set; }

    [Parameter]
    public EventCallback OnClickOnEmptySpace { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Console.WriteLine($"BarChart.OnAfterRenderAsync()");
        Interop.ChartJsInterop chartJs = new Interop.ChartJsInterop(JSRuntime);
        bool loadedChart = await chartJs.LoadBarChart(Id, ChartName, BarType, KeepAspectRatio, this);
    }

    public async Task UpdateChart(BarChartData data)
    {
        //Console.WriteLine($"BarChart.UpdateChart()");
        Interop.ChartJsInterop chartjs = new Interop.ChartJsInterop(JSRuntime);
        await chartjs.UpdateBarData(ChartName, JsonConvert.SerializeObject(data.JSON));
    }

    protected override bool ShouldRender()
    {
        return false; //avoid that the graph re renders from the beginning in every change of the parameter
    }

    [JSInvokable]
    public void ClickInBar(string label, string rgb, int[] ids)
    {
        OnBarClicked.InvokeAsync((label, rgb, ids));
    }

    [JSInvokable]
    public void ClickInEmptySpace()
    {
        OnClickOnEmptySpace.InvokeAsync(null);
    }

}