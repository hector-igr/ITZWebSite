@using ForgeLibs.Data
@using ForgeLibs.ViewModels
@using ForgeLibs.Models.Charts;
@using ForgeLibs.Models.Forge

@using ITZWebClientApp.Interfaces;
@using Newtonsoft.Json;

@inject IJSRuntime JSRuntime
@inject HttpClient http;
@inject OmniClassRepository omni;

<div class="chart-container" style="position: relative; height:100%; width:100% ">
    <canvas id="@Id"></canvas>
</div>

@code {

    [CascadingParameter]
    private ITZWebClientApp.Pages.ForgeDesktop _forgeDesktop { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string ChartName { get; set; }

    public BarChartData Data { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        //Console.WriteLine($"BarChart.OnParametersSetAsync()");
        await UpdateChart();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //Console.WriteLine($"BarChart.OnAfterRenderAsync()");
        //await LoadBarChart();
        Interop.ChartJsInterop chartJs = new Interop.ChartJsInterop(JSRuntime);
        bool loadedChart = await chartJs.LoadBarChart(Id, ChartName, _forgeDesktop);
    }

    public async Task UpdateChart()
    {
        Console.WriteLine($"BarChart.UpdateChart()");
        if (Data != null)
        {
            Interop.ChartJsInterop chartjs = new Interop.ChartJsInterop(JSRuntime);
            await chartjs.UpdateBarData(ChartName, JsonConvert.SerializeObject(Data.JSON));
        }
    }

    protected override bool ShouldRender()
    {
        return false; //avoid that the graph re renders from the beginning in every change of the parameter
    }
}