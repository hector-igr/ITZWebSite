@using ForgeLibs
@using ForgeLibs.Data
@using ForgeLibs.ViewModels
@using ForgeLibs.Models.Forge
@using ITZWebClientApp.Interfaces;

@inject IJSRuntime JSRuntime
@inject HttpClient http;
@inject OmniClassRepository omni;

@namespace ITZWebClientApp.Components.Forge

@*<style>
    #masterTable {
        width: 100%;
    }
</style>*@
<style>
    table {
        font-size: 0.7rem;
    }

    table {
        /*background-color: chocolate;*/
        width: 100%;
        height: 100%;
    }

    tbody {
        display: block;
        /*        overflow:scroll;*/
        height: calc(100% - 80px);
    }

        thead, tbody tr {
            display: table;
            /*background-color: darkseagreen;*/
            width: 100%;
            /*                table-layout: fixed;*/
        }

    .assem-item,
    .fa-chevron-down,
    .fa-chevron-up {
        cursor: pointer;
    }
</style>
@if(Element == null)
{
    <h4>Select an Object</h4>
}
<table>
    <thead>
        <tr>
            <th style="width:1rem">
                @if (Element.Parent != null)
                {
                    <a @onclick=@(x=> { OnParentSelection.InvokeAsync(Element.Parent.ObjectId); } )>
                        <span class="fa fa-chevron-up"></span>
                    </a>
                }
                else
                {
                    <a>
                        <span class="fa fa-chevron-right"></span>
                    </a>
                }
            </th>
            <th>
                @{ var elName = $"{Element.Name} [{Element.RevitId}]"; }
                <a class="assem-item" @onclick=@(x=> OnItemSelection.InvokeAsync(Element.ObjectId.ToString()) )>@elName</a>
            </th>
        </tr>

        <tr>
            <td></td>
            @foreach (string property in Element.ElementProperties.Properties)
            {
                <td>
                    <b>@property : </b>
                    @{ 
                        string propVal = Element.GetPropertyValue(property, true);
                        string unit = Element.GetUnit(property);
                        propVal = double.TryParse(propVal, out double val) ? $"{val.ToString("0.00")} {unit}" : propVal;
                        string v = $"{propVal}";
                        }
                    <span>@v</span>
                </td>
            }
        </tr>
    </thead>
    <tbody id="itemTable">
        @foreach (ForgeTableByCategoryVM group in Element.Grouping)
        {
            <tr>
                <td>
                    <table>
                        @{
                            string guid = string.Join("-", group.Elements.Select(x => x.ObjectId));
                            if (!ExpandGroup.ContainsKey(guid)) ExpandGroup[guid] = false;
                            string tag = NetStandardsUtils.RandomWord();
                            <thead>
                                <tr>
                                    <td style="width:2rem">
                                        @if (group.Elements.Count() > 0)
                                        {
                                            @if (ExpandGroup[guid])
                                            {
                                                <a @onclick=@(x=> ExpandGroup[guid] = false )>
                                                    <span class="fa fa-chevron-up"></span>
                                                </a>
                                            }
                                            else
                                            {
                                                <a @onclick=@(x=> ExpandGroup[guid] = true )>
                                                    <span class="fa fa-chevron-down"></span>
                                                </a>
                                            }
                                        }
                                    </td>
                                    <td id="@Element.ObjectId">
                                        <a @onclick=@(x=> OnItemSelection.InvokeAsync(string.Join(",", group.Elements.Select(y=> y.ObjectId.ToString()))) )>
                                            @group.Category (@group.Elements.Count())
                                        </a>
                                    </td>
                                    @foreach (string property in group.Properties)
                                    {
                                        <td style="width:30%"><b>@property</b> :<span>@ForgeElement.CalculateTotal(group.Elements, property)</span></td>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @if (ExpandGroup[guid])
                                {
                                    var elements = group.Elements.ToList();
                                    for (int i = 0; i < elements.Count; i++)
                                    {
                                        ForgeElement item = elements[i];
                                        string str = (i + 1).ToString("00");
                                <tr id="@item.ObjectId" groupId=@tag>
                                    <td style="width:3rem">
                                        @if (item.Children?.Count() > 0)
                                        {
                                            <button onclick=@($"Expand('{@item.ObjectId}')")>+</button>
                                        }
                                        else
                                        {
                                            @str
                                        }
                                    </td>
                                    <td>
                                        @{string childName = $"{item.Name} [{item.RevitId}]"; }
                                        <a class="assem-item" @onclick=@(x=> OnItemSelection.InvokeAsync(item.ObjectId.ToString()))>@childName</a>
                                    </td>
                                    @foreach (string property in group.Properties)
                                    {
                                        string val = item.GetPropertyValue(property, true);
                                        if (double.TryParse(val, out double dbl))
                                        {
                                            <td class="assem-item" style="width:30%">@dbl.ToString("0.00")</td>
                                        }
                                        else
                                        {
                                            <td  class="assem-item" style="width:30%">@val</td>
                                        }
                                    }
                                </tr>
                                    }
                                }
                            </tbody>
                        }
                    </table>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {

    [Parameter]
    public ForgeElement Element { get; set; }

    [Parameter]
    public EventCallback<int> OnParentSelection { get; set; }

    [Parameter]
    public EventCallback<string> OnItemSelection { get; set; }

    static Dictionary<string, bool> ExpandGroup { get; set; } = new Dictionary<string, bool>();

    protected override void OnParametersSet()
    {
        //Console.WriteLine("ForgeItemTable.OnParametersSet()");
        LoadProperties(Element, omni);
        //StateHasChanged();
    }

    public void LoadProperties(ForgeElement element, OmniClassRepository omniClassRepository)
    {
        //Console.WriteLine("ForgeItemTable.LoadProperties()");
        element.LoadGroups(omniClassRepository);
        //Console.WriteLine("Groups :" + element.Grouping.Count());
        element.LoadProperties(omniClassRepository);
        //Console.WriteLine("ForgeItemTable.LoadProperties() ... Finished");
    }

}