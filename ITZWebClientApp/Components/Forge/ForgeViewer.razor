@using ForgeLibs
@using ForgeLibs.Models.Forge
@using Pages
@using ITZWebClientApp.Interop;
@using ITZWebClientApp.Infraestructure.Data;

@inject IJSRuntime js
@inject HttpClient http;
@inject IItzRepository repo;

@namespace ITZWebClientApp.Components.Forge

<style>
    .changeColors-button {
        /*        background-color:red;*/
    }

        .changeColors-button:before {
            content: "\f042"; /* this is your text. You can also use UTF-8 character codes as I do here */
            font-family: FontAwesome;
            font-size: 23px;
        }

    .resetColors-button {
        /*        background-color: green;*/
    }

        .resetColors-button:before {
            content: "\f12d"; /* this is your text. You can also use UTF-8 character codes as I do here */
            font-family: FontAwesome;
            font-size: 23px;
        }
</style>

<div id="@ViewerId" style="position: relative;
        height: 100%;
        width: 100%;
        /*background-color: #F0F8FF;*/
    "> </div>

@*<button id="MyAwesomeLockButton">Lock it!</button>
<button id="MyAwesomeUnlockButton">Unlock it!</button>*@

@code {

    [Parameter]
    public string ViewerId { get; set; }

    [Parameter]
    public string AccessToken { get; set; }

    [Parameter]
    public string ProjectUrn64 { get; set; }
    [Parameter]
    public string ViewGuid { get; set; }

    [Parameter]
    public EventCallback<bool> OnDocumentLoadSuccess { get; set; }

    [Parameter]
    public EventCallback<int[]> OnChangeSelection { get; set; }

    [Parameter]
    public EventCallback OnModelLoaded { get; set; }

    bool shouldRedner = true;
    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(AccessToken) && !string.IsNullOrEmpty(ProjectUrn64) && !string.IsNullOrEmpty(ViewGuid) && shouldRedner)
        {
            //Console.WriteLine("token : " + AccessToken);
            //Console.WriteLine("urn64 : " + ProjectUrn64);
            //Console.WriteLine("viewGuid : " + ViewGuid);

            await ForgeInterop.LoadDocument(js, ViewerId, AccessToken, ProjectUrn64, ViewGuid, this);
        }
    }

    public void Resize()
    {
        ForgeInterop.Resize(js, ViewerId);
    }


    public void IsolateElements(string ids)
    {
        IsolateElements(ids.Split(',').Select(x => Convert.ToInt32(x)).ToArray());
    }

    protected override bool ShouldRender()
    {
        return false;
    }

    [JSInvokable]
    public void IsolateElements(int[] ids)
    {
        //Console.WriteLine($"ForgeViewer.IsolateElements()");
        ForgeInterop.IsolateElement(js, ViewerId, ids);
    }

    [JSInvokable]
    public void OnViewerChangedSelection(int[] ids)
    {
        //Console.WriteLine("ForgeViewer.OnViewerChangedSelection()");
        OnChangeSelection.InvokeAsync(ids);
    }


    [JSInvokable]
    public void OnLoadInstanceSuccess()
    {
        OnDocumentLoadSuccess.InvokeAsync(true);
        Console.WriteLine("OnLoadInstanceSuccess!!!");
        shouldRedner = false;
    }

    [JSInvokable]
    public void IsModelLoaded()
    {
        OnModelLoaded.InvokeAsync(true);
        Console.WriteLine("MODEL LOADED!!!");
    }

    //[JSInvokable]
    //public static void OnLoadSuccess()
    //{
    //    Console.WriteLine("SUPER SUCCESS");
    //}


    public void ChangeColorElements(int[] ids, string rgbString)
    {
        //Console.WriteLine($"ForgeViewer.ChangeColorElements()");
        ForgeInterop.ChangeColorElement(js, ViewerId, ids, rgbString);
    }

    public void ResetOverrideColors()
    {
        ForgeInterop.ResetOverrideColors(js, ViewerId);
    }

    public void ShowAll()
    {
        ForgeInterop.ShowAll(js, ViewerId);
    }

    public void FitToView(int[] ids = null)
    {
        ForgeInterop.FitToView(js, ViewerId, ids);
    }

    public void ChangeModel(string guid)
    {
        ForgeInterop.TearDown(js, ViewerId);
        ForgeInterop.LoadModel(js, ViewerId, guid, this);
    }

    public void Show(int[] ids)
    {
        ForgeInterop.ShowElements(js, ViewerId, ids);
    }

    public void Hide(int[] ids)
    {
        ForgeInterop.HideElements(js, ViewerId, ids);
    }
}