@using ForgeLibs;
@using ForgeLibs.Models.Forge;
@using ForgeLibs.ViewModels;
@using ForgeLibs.Data;
@using Pages;
@using ITZWebClientApp.Infraestructure.Data;
@using System.Threading;

@inject IJSRuntime JSRuntime
@inject IItzRepository repo;
@inject OmniClassRepository omni;

@namespace ITZWebClientApp.Components.Forge

<style>
    table {
        font-size: 0.7rem;
    }

    table {
        /*background-color: chocolate;*/
        width: 100%;
        height: 100%;
    }

    tbody {
        display: block;
        height: calc(100% - 80px);
    }

        thead, tbody tr {
            display: table;
            /*background-color: darkseagreen;*/
            width: 100%;
            table-layout: fixed;
        }

    .rowSelected {
        background-color: red;
    }

    .rowUnselected {
        background-color: white;
    }
</style>

@if (Model != null)
{
    var groups = Model.GroupElementsByFullName();
    <table>
        <thead id='forgeTableHead'>
            <tr>
                <td>
                    <p><b>Conteo</b></p>
                    <p>(@Model.Elements.Count())</p>
                </td>
                @for (int i = 0; i < Model.Properties.Length; i++)
                {
                    string property = Model.Properties[i];
                    <td>
                        <p><b>@property</b></p>
                        <p>@ForgeElement.CalculateTotal(Model.Elements, property).ToString()</p>
                    </td>
                }
            </tr>
        </thead>
        <tbody id="forgeTableBody">

            @foreach (var group in groups)
            {
                if (!ExpandGroup.ContainsKey(group.Key)) ExpandGroup[group.Key] = true;
                string tag = NetStandardsUtils.RandomWord();
                string js_ContractGroup = $"tableExpander.contractGroup(event, '{tag}')";
                @if (group.Count() > 0)
                {
                    <tr class="rowUnselected">
                        <td>
                            @if (ExpandGroup[group.Key])
                            {
                                <a @onclick=@(x => ExpandGroup[group.Key] = !ExpandGroup[group.Key] ) isExpanded="false">
                                    <span class="fa fa-chevron-up"></span>
                                </a>
                            }
                            else
                            {
                                <a @onclick=@(x => ExpandGroup[group.Key] = !ExpandGroup[group.Key] ) isExpanded="false">
                                    <span class="fa fa-chevron-down"></span>
                                </a>
                            }
                            <b>@group.Key</b>


                        </td>
                    </tr>
                    <tr>
                        <td>Total</td>
                        @foreach (string property in Model.Properties)
                        {
                            <td><span>@ForgeElement.CalculateTotal(group, property)</span></td>
                        }
                    </tr>
                }
                @if (ExpandGroup[group.Key] && true)
                {
                    @foreach (ForgeElement item in group)
                    {
                        //hidden="hidden"
                        var trId = "hgr" + item.ObjectId;
                        <tr class="rowUnselected" groupId=@tag id=@trId>
                            <td>
                                <a @onclick="@(x => { OnItemSelected.InvokeAsync(item.ObjectId); JSRuntime.InvokeVoidAsync("PaintRow", trId); })">[@item.RevitId]</a>
                            </td>
                            @foreach (string property in Model.Properties)
                            {
                                <td>@item.GetPropertyValue(property, true)</td>
                            }
                        </tr>
                    }
                }
            }
        </tbody>

        @*<tfoot>
                <tr>
                    <th>Count = @Model.Elements.Count()</th>
                    @foreach (string property in Model.Properties)
                    {
                        <th>@ForgeElement.CalculateTotal(Model.Elements, property).ToString()  </th>
                    }
                    <th></th>
                </tr>
            </tfoot>*@
    </table>
}



@code{

    Dictionary<string, bool> ExpandGroup { get; set; } = new Dictionary<string, bool>();
    private ForgeTableByCategoryVM Model;

    [Parameter]
    public IEnumerable<ForgeElement> ForgeElements { get; set; } = Enumerable.Empty<ForgeElement>();

    private string _Category;
    [Parameter]
    public string Category
    {
        get { return _Category; }
        set
        {
            if (_Category != value)
            {
                JSRuntime.InvokeVoidAsync("PaintRow", "");
            }
            _Category = value;
        }
    }


    [Parameter]
    public EventCallback<int> OnItemSelected { get; set; }


    protected override Task OnParametersSetAsync()
    {
        //Console.WriteLine("ForgeElementTable.OnParametersSetAsync()");
        //Console.WriteLine("Forge Elements Count : " + ForgeElements.Count().ToString());
        if (!string.IsNullOrEmpty(Category))
        {
            Model = ForgeTableByCategoryVM
                .GetModelByCategory(omni, ForgeElements, Category);
        }
        else
        {
            //Model = null;
        }


        return base.OnParametersSetAsync();
    }
}
