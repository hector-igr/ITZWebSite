@using ForgeLibs.Data;
@using ForgeLibs.Models.Forge;
@using ITZWebClientApp.Pages;
@using ITZWebClientApp.Infraestructure;
@using ForgeLibs.Models.Charts;
@using ForgeLibs.Models.Forge.Queries;
@using ITZWebClientApp.Interop;

@inject IJSRuntime js
@inject HttpClient http;


@namespace ITZWebClientApp.Components.Forge

<style>
    .forgeQuery .form-row {
        align-items: center;
        display: flex;
    }

    .forgeQuery .selectionIds {
        display: flex;
    }

    .form-row {
        flex-wrap: initial;
    }

    .forgeDropdown {
        /*        padding-left:3px;
        padding-right:3px;*/
    }
</style>



<div class="input-group input-group-sm forgeDropdown mr-3">
    <div class="input-group-prepend">
        <label class="input-group-text forgeFirstQueryLabel" for="queryTypeSelector">Query</label>
    </div>

    <select id="queryTypeSelector" class="form-control qry_Categories custom-select" @onchange="(x => Query = (QueryType)Convert.ToInt32(x.Value))">
        <option value="-1">Select ... </option>
        @foreach (QueryType queryType in QueryTypes)
        {
            @if (queryType != QueryType.None)
            {
                <option value="@((int)queryType)">@queryType</option>
            }
        }
    </select>
</div>

@if (_query == QueryType.ByCategory)
{
    <ForgeCategoryController @ref="@_categoryController"
                             ForgeElements="@ForgeElements"
                             OnCategoryChanged="@(x=> OnCategoryChanged.InvokeAsync(x))"
                             OnChartDataChanged="@(x=> { OnChartDataChanged.InvokeAsync(x); })"></ForgeCategoryController>
}

@if (_query == QueryType.ByAdvance)
{
    <ForgeScheduleController @ref="@_scheduleController"
                             Schedules="ForgeSchedules"
                             OnScheduleSelected="@(x => OnScheduleChanged.InvokeAsync(x) )"
                             OnDateChanged="@(x=> OnDateChanged.InvokeAsync(x))"></ForgeScheduleController>
}

@code {

    private ForgeCategoryController _categoryController = null;
    private ForgeScheduleController _scheduleController = null;

    [Parameter]
    public string SelectedIds { get; set; }
    [Parameter]
    public QueryType[] QueryTypes { get; set; } = new QueryType[0];
    [Parameter]
    public IEnumerable<ForgeElement> ForgeElements { get; set; } = Array.Empty<ForgeElement>();
    [Parameter]
    public ForgeSchedule[] ForgeSchedules { get; set; } = Array.Empty<ForgeSchedule>();
    [Parameter]
    public EventCallback<QueryType> OnQueryTypeChanged { get; set; }
    [Parameter]
    public EventCallback<ForgeSchedule> OnScheduleChanged { get; set; }
    [Parameter]
    public EventCallback<string> OnSelectIds { get; set; }
    [Parameter]
    public EventCallback<BarChartData> OnChartDataChanged { get; set; }
    [Parameter]
    public EventCallback<string> OnCategoryChanged { get; set; }
    [Parameter]
    public EventCallback<DateTime> OnDateChanged { get; set; }
    private QueryType _query = QueryType.None;
    [Parameter]
    public QueryType Query
    {
        get { return _query; }
        set
        {
            if (_query != value)
            {
                OnQueryTypeChanged.InvokeAsync(value);
                _query = value;
                StateHasChanged();
            }
        }
    }
    public void Reset()
    {
        SelectDropDownInterop.ChangeSelectIndexById(js, "queryTypeSelector", 0);
        if(_categoryController != null)
        {
            _categoryController.Reset();
        }
    }
}