@using ForgeLibs.Data;
@using ForgeLibs.Models.Forge;
@using ITZWebClientApp.Infraestructure;
@using ForgeLibs.Models.Charts;
@using ForgeLibs.Models.Forge.Queries; 

@inject IJSRuntime JSRuntime
@inject HttpClient http;
@inject OmniClassRepository omni;

@namespace ITZWebClientApp.Components.Forge
<style>
    .forgeQuery .form-row {
        align-items: center;
        display: flex;
    }

    .forgeQuery .selectionIds {
        display: flex;
    }

    .form-row {
        flex-wrap: initial;
    }
    .forgeDropdown{
        padding-left:3px;
        padding-right:3px;
    }
</style>

<EditForm Model="@query">
    <div class="forgeQuery form-row ">
        <div class="forgeDropdown">
            @*<InputSelect Id="qry_Categories" @bind-Value="Query" Class="form-control">
                <option selected="selected">Query Type ... </option>
                @foreach (QueryType queryType in Enum.GetValues(typeof(QueryType)))
                {
                    <option value="@queryType">@queryType</option>
                }
            </InputSelect>*@
            <select class="form-control qry_Categories" @onchange="(x => Query = (QueryType)Convert.ToInt32(x.Value))">
                <option value="-1" >Query Type ... </option>
                @foreach (QueryType queryType in Enum.GetValues(typeof(QueryType)))
                {
                    @if (queryType != QueryType.None)
                    {
                        <option value="@((int)queryType)">@queryType</option>
                    }
                }
            </select>
        </div>

        @for (int p = 0; p < query.ParameterValues.Count; p++)
        {
            int index = p;
            <div class="forgeDropdown">
                <select class="qry_Parameters-@index.ToString() form-control " @onchange="(x => QueryParamValues[index].Value = (string)x.Value )"  >
                    <option value="-1" selected>@QueryParamValues[index].Name ... </option>
                    @foreach (string item in query.ParameterValues[index])
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </div>
        }

        @for (int g = 0; g < query.GroupValues.Count; g++)
        {
            int index = g;
            <div class="forgeDropdown">
                <select class="qry_Groups-@index.ToString() form-control " @onchange="(x=> QueryGroupValues[index].Value = (string)x.Value )" >
                    <option value="-1" selected>@QueryGroupValues[index].Name ... </option>
                    @foreach (string item in query.GroupValues[index])
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </div>
        }

        @*<div class="selectionIds">
            <InputText Id="selectedId" @bind-Value="SelectedIds" Class="form-control" />
            <button class="btn btn-primary" type="submit" @onclick="@(x => OnSelectIds.InvokeAsync(SelectedIds) )">Isolate</button>
        </div>*@
    </div>

</EditForm>

@functions {

    public class QueryLevels
    {
        public QueryType QueryType { get; set; }
        public List<List<string>> ParameterValues = new List<List<string>>();
        public List<List<string>> GroupValues = new List<List<string>>();
    }
    public QueryLevels query { get; set; } = new QueryLevels();

    [Parameter]
    public IEnumerable<ForgeElement> ForgeElements { get; set; }

    [Parameter]
    public string SelectedIds { get; set; }

    [Parameter]
    public EventCallback<string> OnCategoryChanged { get; set; }

    public Dictionary<QueryType, List<string>> QueryParameters { get; set; }

    [Parameter]
    public EventCallback<string> OnParameterChanged { get; set; }

    [CascadingParameter]
    public ITZWebClientApp.Pages.ForgeDesktop forgeDomain { get; set; }

    [Parameter]
    public EventCallback<string> OnSelectIds { get; set; }

    [Parameter]
    public EventCallback<BarChartData> OnChartDataChanged { get; set; }

    private string _selectedCategory;
    [Parameter]
    public string SelectedCategory
    {
        get { return _selectedCategory; }
        set
        {
            //GetPropertiesByCategories(value);
            Console.WriteLine("CHANGE CAT : " + value);
            OnCategoryChanged.InvokeAsync(value);
            if (_selectedCategory != value)
            {
                _selectedCategory = value;
                //SelectedProperty = "";
                //SelecteGrouping = "";
            }

        }
    }
    //IForgeQuery forgeQuery;

    ForgePropertySelector[] QueryParamValues = new ForgePropertySelector[0];
    ForgePropertySelector[] QueryGroupValues = new ForgePropertySelector[0];

    private QueryType _query;
    [Parameter]
    public QueryType Query
    {
        get { return _query; }
        set {
            _query = value;
            query.ParameterValues.Clear();
            query.GroupValues.Clear();

            SelectedCategory = "";
            switch (_query)
            {
                case QueryType.ByAdvance:
                    {
                        var data = BarChartData.EmptyBarChart();
                        OnChartDataChanged.InvokeAsync(data);

                        QueryParamValues = new ForgePropertySelector[] { new ForgePropertySelector("Date"), new ForgePropertySelector("Week") };
                        QueryGroupValues = new ForgePropertySelector[] { new ForgePropertySelector("Range")};

                        query.ParameterValues = new List<List<string>>()
                        {
                            new List<string>() { "01" , "02" },
                            new List<string>() { "1 semana", "2 semana" }
                        };

                        query.GroupValues = new List<List<string>>()
                        {
                            new List<string>() { "Corte", "None" },
                        };
                    }

                    break;

                case QueryType.ByCategory:
                    {
                        QueryByCatetory forgeQuery = new QueryByCatetory(ForgeElements, omni);

                        query.ParameterValues = new List<List<string>>()
                        {
                            forgeQuery.Categories.ToList(),
                            new List<string>()
                        };

                        query.GroupValues = new List<List<string>>()
                        {
                             new List<string>()
                        };

                        var cat = new ForgePropertySelector("Category");
                        cat.ValueChanged += (x, y) =>
                        {
                            SelectedCategory = y.Value;
                            forgeQuery.Category = y.Value;
                            forgeQuery.Property = "";
                            forgeQuery.Group = "";
                            query.ParameterValues[1].Clear();
                            query.GroupValues[0].Clear();


                            var data = BarChartData.EmptyBarChart();
                            OnChartDataChanged.InvokeAsync(data);

                            query.ParameterValues[1] = forgeQuery.GetParametersByCategories().ToList();
                            query.GroupValues[0] = forgeQuery.GetGroupParametersByCategories().ToList();

                            //Console.WriteLine("Reset Select from qry_Groups-0");
                            JSRuntime.InvokeVoidAsync("ChangeSelectIndex", "qry_Groups-0", 0);
                            //Console.WriteLine("Reset Select from qry_Parameters-1");
                            JSRuntime.InvokeVoidAsync("ChangeSelectIndex", "qry_Parameters-1", 0);
                        };

                        var property = new ForgePropertySelector("Property");
                        property.ValueChanged += (x, y) =>
                        {
                            forgeQuery.Property = y.Value;
                            if (y.Value == "-1")
                            {
                                forgeQuery.Property = "";
                                var data = BarChartData.EmptyBarChart();
                                OnChartDataChanged.InvokeAsync(data);
                            }
                            else
                            {
                                OnChartDataChanged.InvokeAsync(forgeQuery.GetChartData());
                            }
                        };

                        var grpProperty = new ForgePropertySelector("Group By");
                        grpProperty.ValueChanged += (x, y) =>
                        {
                            forgeQuery.Group = y.Value;
                            if (y.Value == "-1")
                            {
                                forgeQuery.Group = "";
                            }
                            else
                            {

                            }
                            OnChartDataChanged.InvokeAsync(forgeQuery.GetChartData());
                        };

                        QueryParamValues = new ForgePropertySelector[] { cat, property };
                        QueryGroupValues = new ForgePropertySelector[] { grpProperty };
                    }
                    break;
                default:
                    {
                        var data = BarChartData.EmptyBarChart();
                        OnChartDataChanged.InvokeAsync(data);
                    }
                    break;

            }
            JSRuntime.InvokeVoidAsync("ChangeSelectIndex", "qry_Parameters", 0);
            JSRuntime.InvokeVoidAsync("ChangeSelectIndex", "qry_Groups", 0);
            StateHasChanged();
        }
    }
}