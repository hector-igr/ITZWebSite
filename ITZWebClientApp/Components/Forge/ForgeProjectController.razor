@using ITZWebClientApp.Infraestructure.Data;
@using ForgeLibs.Models.Forge;
@using ForgeLibs.Models;
@using ForgeLibs;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using ITZWebClientApp.Interop;
@using Console = ITZWebClientApp.Interop.Debug.ConsoleITZ;


@inject IItzRepository repo;
@inject IJSRuntime js;

<style>
    .popover-body {
        font-weight: 400;
        color: red;
        /*        background: var(--webFavoriteColor) !important;*/
    }

    /*        .popover.bottom .arrow:after {
            border-bottom-color: var(--webFavoriteColor);
        }*/
</style>

<div class="input-group input-group-sm px-2">
    <div class="input-group-prepend">
        <label class="input-group-text forgeFirstQueryLabel">Model</label>
    </div>

    <select id="modelSelector" class="form-control custom-select"
            @onchange="@(async x=>
                        {
                            string objId = (string)x.Value;
                            if(objId != "-1")
                            {
                                SelectedModel = ForgeModels.FirstOrDefault(y => y.ObjectId == objId);
                                viewIsLoaded = false;
                            }
                        })">
        <option value="-1">Select Model</option>
        @foreach (ForgeModel model in ForgeModels)
        {
            <option value="@model.ObjectId">@model.ObjectKey</option>
        }
    </select>
    @if (SelectedModel != null)
    {
        <select id="viewSelector" class="form-control custom-select" disabled data-toggle="popover" data-content="Select" data-placement="bottom" data-container="body"
                @onchange="@(async x=> {
                                 string guid = (string)x.Value;
                                 SelectedView = ModelViews.FirstOrDefault(y=> y.Guid == guid);
                                 if(!string.IsNullOrEmpty(guid))
                                 {
                                     await OnViewSelected.InvokeAsync(SelectedView);
                                     if(viewIsLoaded == false)
                                     {
                                         await HidePopper("viewSelector");
                                         viewIsLoaded = true;
                                     }
                                 }
                             })">
            <option value="-1">Select View</option>
            @foreach (ForgeView view in ModelViews)
            {
                <option value="@view.Guid">@view.Name</option>
            }
        </select>
    }
</div>

@code {

    [Parameter]
    public string AccessToken { get; set; }
    [Parameter]
    public Project Project { get; set; }
    private ForgeModel _SelectedModel;
    [Parameter]
    public ForgeModel SelectedModel
    {
        get { return _SelectedModel; }
        set
        {
            _SelectedModel = value;
            new Task(async () =>
            {
                await OnModelChanged.InvokeAsync(SelectedModel);
                await LoadViews(SelectedModel.ObjectId);

            }).Start();
        }
    }
    [Parameter]
    public EventCallback<ForgeModel> OnModelChanged { get; set; }
    [Parameter]
    public EventCallback<ForgeView> OnViewSelected { get; set; }
    public ForgeView SelectedView { get; set; }
    ForgeModel[] ForgeModels { get; set; } = Array.Empty<ForgeModel>();
    ForgeView[] ModelViews { get; set; } = Array.Empty<ForgeView>();
    bool viewIsLoaded = false;

    protected override async Task OnParametersSetAsync()
    {
        if (Project != null && !string.IsNullOrEmpty(AccessToken))
        {
            await LoadModels(Project.ModelRepo);
        }
    }

    public async Task LoadModels(string modelRepo)
    {
        dynamic models = await ForgeUtils.GetObjects(AccessToken, modelRepo);
        ForgeModels = ((JArray)models.items).ToObject<ForgeModel[]>().OrderBy(x => x.BucketKey).ToArray();
        //Console.WriteLine($"Load Models .. {ForgeModels.Count()}");
    }

    int c = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ForgeModels.Count() == 1 && c++ == 0)
        {
            SelectDropDownInterop.DisableDropdown(js, "modelSelector");
            SelectDropDownInterop.ChangeSelectIndexById(js, "modelSelector", 1);
            SelectedModel = ForgeModels.First();
            await RegisterPopper("viewSelector");
        }

    }
    public async Task LoadViews(string urn)
    {
        Console.OpenGroup($"{nameof(LoadViews)}");
        dynamic viewData = await ForgeUtils.GetForgeViews(AccessToken, urn);
        ModelViews = ((JArray)viewData.data.metadata).ToObject<ForgeView[]>().Where(x => x.Role == "3d").OrderBy(x => x.Name).ToArray();
        Console.WriteLine("modelviews ... ");
        Console.WriteLine(ModelViews);
        SelectDropDownInterop.EnableDropdown(js, "viewSelector");
        if (viewIsLoaded == false)
        {
            await ShowPopper("viewSelector");
        }
        Console.CloseGroup();
    }
    public async Task ShowPopper(string id)
    {
        await js.InvokeVoidAsync("Popper.show", "#" + id);
    }
    public async Task HidePopper(string id)
    {
        await js.InvokeVoidAsync("Popper.hide", "#" + id);
    }
    public async Task RegisterPopper(string id)
    {
        await js.InvokeVoidAsync("Popper.register", "#" + id);
    }
}
