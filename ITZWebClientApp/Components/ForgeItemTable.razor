@using ForgeLibs
@using ForgeLibs.Data
@using ForgeLibs.ViewModels
@using ForgeLibs.Models.Forge
@using ITZWebClientApp.Interfaces;

@inject IJSRuntime JSRuntime
@inject HttpClient http;
@inject OmniClassRepository omni;


    <style>
        #masterTable{
            width:100%;
        }
    </style>

<table id="masterTable">
    <thead>
        <tr>
            <th>
                @if (Model.Parent != null)
                {
                    <a @onclick=@(x=> { SelectParent(Model.Parent.ObjectId); } )>
                        <span class="fa fa-chevron-up"></span>
                    </a>
                }
                else
                {
                    <a>
                        <span class="fa fa-chevron-right"></span>
                    </a>
                }
            </th>
            @*<th><a onclick=@($"forgeFunctions.isolateElements({@Model.ObjectId})")>@Model.Name</a></th>*@ 
            <th>
                <a @onclick=@(x=> OnItemSelection.InvokeAsync(Model.ObjectId.ToString()) )>@Model.Name</a>
            </th>
        </tr>

        <tr>
            <td></td>

            @foreach (string property in Model.ElementProperties.Properties)
                {
                <td>
                    <b>@property : </b>
                    <span>@Model.GetPropertyValue(property)</span>
                </td>
                }
        </tr>
    </thead>
    <tbody id="itemTable">
        @foreach (ForgeElementTableVM group in Model.Grouping)
        {
            <tr>
                <td colspan="10">
                    <table>
                        @{
                            string guid = string.Join("-", group.Elements.Select(x => x.ObjectId));
                            if (!ExpandGroup.ContainsKey(guid)) ExpandGroup[guid] = true;

                            string tag = NetStandardsUtils.RandomWord();

                            <thead>
                                <tr>
                                    <td>
                                        @if (group.Elements.Count() > 0)
                                        {
                                            @if (ExpandGroup[guid])
                                            {
                                                <a @onclick=@(x=> ExpandGroup[guid] = false )>
                                                    <span class="fa fa-chevron-up"></span>
                                                </a>
                                            }
                                            else
                                            {
                                                <a @onclick=@(x=> ExpandGroup[guid] = true )>
                                                    <span class="fa fa-chevron-down"></span>
                                                </a>
                                            }

                                        }
                                    </td>
                                    <td id="@Model.ObjectId">
                                        <a @onclick=@(x=> OnItemSelection.InvokeAsync(string.Join(",", group.Elements.Select(y=> y.ObjectId.ToString()))) )>
                                            @group.Category (@group.Elements.Count())
                                        </a>
                                    </td>
                                    @foreach (string property in group.Properties)
                                    {
                                        <td><b>@property</b> :<span>@ForgeElement.CalculateTotal(group.Elements, property)</span></td>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @if (ExpandGroup[guid])
                                {
                                    var elements = group.Elements.ToList();
                                    for (int i = 0; i < elements.Count; i++)
                                    {
                                        ForgeElement item = elements[i];
                                        string str = (i + 1).ToString("00");
                                        <tr id="@item.ObjectId" groupId=@tag>
                                            <td>
                                                @if (item.Children?.Count() > 0)
                                                {
                                                    <button onclick=@($"Expand('{@item.ObjectId}')")>+</button>
                                                }
                                                else
                                                {
                                                    @str
                                                }
                                            </td>
                                            <td>
                                                <a @onclick=@(x=> OnItemSelection.InvokeAsync(item.ObjectId.ToString()))>@item.Name</a>
                                            </td>
                                            @foreach (string property in group.Properties)
                                            {
                                                <td>@item.GetPropertyValue(property)</td>
                                            }
                                        </tr>
                                    }
                                }
                            </tbody>
                        }
                    </table>
                </td>
            </tr>
        }


        @*@foreach (ForgeElementTableVM group in Model.Grouping)
        {
            var guid = string.Join("-", group.Elements.Select(x => x.ObjectId));
            if (!ExpandGroup.ContainsKey(guid)) ExpandGroup[guid] = false;

            string tag = NetStandardsUtils.RandomWord();
            <tr>
                <td>
                    @if (group.Elements.Count() > 0)
                    {
                        <a onclick=@($"tableExpander.contractGroup(event, '{@tag}')") isExpanded="true">
                            <span class="fa fa-chevron-up"></span>
                        </a>
                        @if (ExpandGroup[guid])
                        {
                            <a @onclick=@(x=> ExpandGroup[guid] = false )>
                                <span class="fa fa-chevron-up"></span>
                            </a>
                        }
                        else
                        {
                            <a @onclick=@(x=> ExpandGroup[guid] = true )>
                                <span class="fa fa-chevron-down"></span>
                            </a>
                        }

                    }
                </td>
                <td id="@Model.ObjectId">
                    <a @onclick=@(x=> OnItemSelection.InvokeAsync(string.Join(",", group.Elements.Select(y=> y.ObjectId.ToString()))) )>
                        @group.Category (@group.Elements.Count())
                    </a>
                </td>
                @foreach (string property in group.Properties)
                {
                    <td><b>@property</b> :<span>@ForgeElement.CalculateTotal(group.Elements, property)</span></td>
                }
            </tr>

            if (ExpandGroup[guid])
            {
                var elements = group.Elements.ToList();
                for (int i = 0; i < elements.Count; i++)
                {
                    ForgeElement item = elements[i];
                    <tr id="@item.ObjectId" groupId=@tag>
                        <td>
                            @if (item.Children?.Count() > 0)
                            {
                                <button onclick=@($"Expand('{@item.ObjectId}')")>+</button>
                            }
                        </td>
                        <td>
                            @(i + 1).ToString("00")
                            <a @onclick=@(x=> OnItemSelection.InvokeAsync(item.ObjectId.ToString()))>@item.Name</a>
                        </td>
                        @foreach (string property in group.Properties)
                        {
                            <td>@item.GetPropertyValue(property)</td>
                        }
                    </tr>
                }
            }
        }*@
    </tbody>
</table>

@code {

    [Parameter]
    public ForgeElement Model { get; set; }

    [Parameter]
    public EventCallback<int> OnParentSelection { get; set; }

    [Parameter]
    public EventCallback<string> OnItemSelection { get; set; }

    [CascadingParameter]
    public ITZWebClientApp.Pages.ForgeDomain forgeDomain { get; set; }

    static Dictionary<string, bool> ExpandGroup { get; set; } = new Dictionary<string, bool>();

    protected override bool ShouldRender()
    {
        return true;
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("ForgeItemTable.OnInit()");
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("ForgeItemTable.OnParametersSet()");
        LoadProperties(Model, omni);
        StateHasChanged();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("ForgeItemTable.OnAfterRenderAsync()");
        return base.OnAfterRenderAsync(firstRender);
    }

    public void LoadProperties(ForgeElement element, OmniClassRepository omniClassRepository)
    {
        Console.WriteLine("ForgeItemTable.LoadProperties()");
        element.LoadGroups(omniClassRepository);
        Console.WriteLine("Groups :" + element.Grouping.Count());
        element.LoadProperties(omniClassRepository);
        Console.WriteLine("ForgeItemTable.LoadProperties() ... Finished");
    }

    public void SelectParent(int objectId)
    {
        Console.WriteLine($"ForgeItemTable.SelectParent({objectId})");
        forgeDomain.GetForgeElement(objectId);
    }

}