@using ForgeLibs;
@using ForgeLibs.Models.Forge;
@using ForgeLibs.ViewModels;
@using ForgeLibs.Data;
@using Pages;
@using ITZWebClientApp.Infraestructure.Data;
@using System.Threading;

@inject IJSRuntime JSRuntime
@inject IForgeModelRepository repo;
@inject OmniClassRepository omni;


<style>
    table {
        /*background-color: chocolate;*/
        width: 100%;
        height: 100%;
    }
    tbody{
        display:block;
        overflow:auto;
        height:calc(100% - 80px);
    }

    thead, tbody tr {
        display:table;
        /*background-color: darkseagreen;*/
        width:100%;
        table-layout:fixed;
    }

</style>
<table>
    <thead id='forgeTableHead'>
        <tr>
            <td>
                <p><b>Conteo</b></p>
                <p>(@Model.Elements.Count())</p> 
            </td>
            @for (int i = 0; i < Model.Properties.Length; i++)
            {
                string property = Model.Properties[i];
                <td>
                    <p><b>@property</b></p>
                    <p>@ForgeElement.CalculateTotal(Model.Elements, property).ToString()</p>
                </td>
            }
        </tr>
    </thead>
    <tbody id="forgeTableBody">
        @{ var groups = Model.GroupElementsByFullName();}
        @foreach (var group in groups)
        {
            if (!ExpandGroup.ContainsKey(group.Key)) ExpandGroup[group.Key] = true;
            string tag = NetStandardsUtils.RandomWord();
            string js_ContractGroup = $"tableExpander.contractGroup(event, '{tag}')";
            @if (group.Count() > 0)
            {
                <tr>
                    <td>
                        @*<a onclick="contractGroup(event, '@tag')" isExpanded="false">
                            <span class="glyphicon glyphicon-chevron-down"></span>
                        </a>*@
                        @*<a @onclick=@js_ContractGroup isExpanded="false">
                            <span class="fa fa-chevron-down"></span>
                        </a>*@

                        @if (ExpandGroup[group.Key])
                        {
                            <a @onclick=@(x=> ExpandGroup[group.Key] = !ExpandGroup[group.Key] ) isExpanded="false">
                                <span class="fa fa-chevron-up"></span>
                            </a>
                        }
                        else
                        {
                            <a @onclick=@(x=> ExpandGroup[group.Key] = !ExpandGroup[group.Key] ) isExpanded="false">
                                <span class="fa fa-chevron-down"></span>
                            </a>
                        }
                        <b>@group.Key</b>


                    </td>
                </tr>
                <tr>
                    <td>Total</td>
                    @foreach (string property in Model.Properties)
                    {
                        <td><span>@ForgeElement.CalculateTotal(group, property)</span></td>
                    }
                </tr>
            }
            @if (ExpandGroup[group.Key] && true)
            {
                @foreach (ForgeElement item in group)
                {
                    //hidden="hidden"
                    <tr groupId=@tag>
                        <td><a @onclick="@(x=> OnItemSelected.InvokeAsync(item.ObjectId) )">[@item.RevitId]</a></td>
                        @foreach (string property in Model.Properties)
                        {
                            <td>@item.GetPropertyValue(property, true)</td>
                        }
                    </tr>
                }
            }
        }
    </tbody>

    @*<tfoot>
            <tr>
                <th>Count = @Model.Elements.Count()</th>
                @foreach (string property in Model.Properties)
                {
                    <th>@ForgeElement.CalculateTotal(Model.Elements, property).ToString()  </th>
                }
                <th></th>
            </tr>
        </tfoot>*@
</table>


@functions{

    Dictionary<string, bool> ExpandGroup { get; set; } = new Dictionary<string, bool>();

    [Parameter]
    public IEnumerable<ForgeElement> ForgeElements { get; set; }
    [Parameter]
    public string Category { get; set; }
    [Parameter]
    public EventCallback<int> OnItemSelected { get; set; }

    private ForgeElementTableVM Model;

    protected override void OnParametersSet()
    {
        Console.WriteLine("ForgeElementTable.OnParametersSet()");
        Model = ForgeElementTableVM
                .GetModelByCategory(omni, ForgeElements, Category);
        StateHasChanged();
    }
}
